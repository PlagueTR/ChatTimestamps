plugins {
	id 'fabric-loom' version '1.0.17'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'java-library'
	id 'java'
}


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.mc_version}"
group = project.maven_group

repositories {
	mavenCentral()
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

configurations {
	shadow
	implementation.extendsFrom shadow
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Deprecated Fabric API modules
	//modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	modImplementation ("me.shedaniel.cloth:config-2:${project.cloth_version}") {
		exclude module: "fabric-api"
	}

	modImplementation ("io.github.prospector:modmenu:${project.modmenu_version}") {
		exclude module: "fabric-api"
		transitive = false
	}
	modImplementation (fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
	modImplementation (fabricApi.module("fabric-screen-api-v1", project.fabric_version))
	modImplementation (fabricApi.module("fabric-key-binding-api-v1", project.fabric_version))
	modImplementation (fabricApi.module("fabric-lifecycle-events-v1", project.fabric_version))

	shadow "com.electronwill.night-config:json:${project.nightconfig_version}"
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.12 (17w13a) to 1.16.5 (21w18a) (both ends included) use Java 8
	it.options.release.set(8)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

shadowJar {
	dependsOn jar
	configurations = [project.configurations.shadow]
	destinationDirectory.set(file("${project.buildDir}/devlibs"))
	archiveClassifier.set('dev')

	relocate 'com.electronwill.nightconfig', 'space.plague.chattimestamps.shadow.nightconfig'
}
prepareRemapJar.dependsOn(shadowJar)